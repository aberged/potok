{
  "openapi": "3.1.0",
  "info": {
    "title": "Potok API",
    "version": "0.0.1",
    "description": "Potok API",
    "summary": "Potok ZenStack API"
  },
  "tags": [
    {
      "name": "user",
      "description": "User operations"
    },
    {
      "name": "group",
      "description": "Group operations"
    },
    {
      "name": "post",
      "description": "Post operations"
    },
    {
      "name": "auth",
      "description": "Auth operations"
    }
  ],
  "components": {
    "schemas": {
      "UserScalarFieldEnum": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "password",
          "email",
          "createdAt",
          "updatedAt"
        ]
      },
      "GroupScalarFieldEnum": {
        "type": "string",
        "enum": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "creatorId"
        ]
      },
      "PostScalarFieldEnum": {
        "type": "string",
        "enum": [
          "id",
          "createdAt",
          "updatedAt",
          "content",
          "authorId",
          "groupId"
        ]
      },
      "AuthScalarFieldEnum": {
        "type": "string",
        "enum": [
          "idd",
          "createdAt",
          "updatedAt",
          "userId",
          "postId",
          "authId",
          "crud"
        ]
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "NullsOrder": {
        "type": "string",
        "enum": [
          "first",
          "last"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          },
          "memberOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "createdGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "auths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Auth"
            }
          }
        },
        "required": [
          "id",
          "name",
          "password",
          "email",
          "createdAt",
          "updatedAt"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/User"
          },
          "creatorId": {
            "type": "integer"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "creator",
          "creatorId"
        ]
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "groupId": {
            "type": "integer"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "auths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Auth"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "content",
          "authorId",
          "author",
          "groupId",
          "group"
        ]
      },
      "Auth": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "post": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Post"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "idd",
          "createdAt",
          "updatedAt",
          "authId",
          "crud"
        ]
      },
      "UserWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostListRelationFilter"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupListRelationFilter"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupListRelationFilter"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthListRelationFilter"
          }
        }
      },
      "UserOrderByWithRelationInput": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "name": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "password": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "email": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "createdAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "posts": {
            "$ref": "#/components/schemas/PostOrderByRelationAggregateInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupOrderByRelationAggregateInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupOrderByRelationAggregateInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthOrderByRelationAggregateInput"
          }
        }
      },
      "UserWhereUniqueInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereInput"
                }
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostListRelationFilter"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupListRelationFilter"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupListRelationFilter"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthListRelationFilter"
          }
        }
      },
      "UserScalarWhereWithAggregatesInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        }
      },
      "GroupWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "members": {
            "$ref": "#/components/schemas/UserListRelationFilter"
          },
          "posts": {
            "$ref": "#/components/schemas/PostListRelationFilter"
          }
        }
      },
      "GroupOrderByWithRelationInput": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "createdAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "name": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "creatorId": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "creator": {
            "$ref": "#/components/schemas/UserOrderByWithRelationInput"
          },
          "members": {
            "$ref": "#/components/schemas/UserOrderByRelationAggregateInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostOrderByRelationAggregateInput"
          }
        }
      },
      "GroupWhereUniqueInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereInput"
                }
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "creator": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "members": {
            "$ref": "#/components/schemas/UserListRelationFilter"
          },
          "posts": {
            "$ref": "#/components/schemas/PostListRelationFilter"
          }
        }
      },
      "GroupScalarWhereWithAggregatesInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "PostWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "author": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "group": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              }
            ]
          },
          "auths": {
            "$ref": "#/components/schemas/AuthListRelationFilter"
          }
        }
      },
      "PostOrderByWithRelationInput": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "createdAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "content": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "authorId": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "groupId": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "author": {
            "$ref": "#/components/schemas/UserOrderByWithRelationInput"
          },
          "group": {
            "$ref": "#/components/schemas/GroupOrderByWithRelationInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthOrderByRelationAggregateInput"
          }
        }
      },
      "PostWhereUniqueInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereInput"
                }
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "author": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "group": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/GroupWhereInput"
              }
            ]
          },
          "auths": {
            "$ref": "#/components/schemas/AuthListRelationFilter"
          }
        }
      },
      "PostScalarWhereWithAggregatesInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "AuthWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereInput"
                }
              }
            ]
          },
          "idd": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserNullableScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "post": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostNullableScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "AuthOrderByWithRelationInput": {
        "type": "object",
        "properties": {
          "idd": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "createdAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "userId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              },
              {
                "$ref": "#/components/schemas/SortOrderInput"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              },
              {
                "$ref": "#/components/schemas/SortOrderInput"
              }
            ]
          },
          "authId": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "crud": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "user": {
            "$ref": "#/components/schemas/UserOrderByWithRelationInput"
          },
          "post": {
            "$ref": "#/components/schemas/PostOrderByWithRelationInput"
          }
        }
      },
      "AuthWhereUniqueInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereInput"
                }
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserNullableScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "post": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostNullableScalarRelationFilter"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "AuthScalarWhereWithAggregatesInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
                }
              }
            ]
          },
          "idd": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeWithAggregatesFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableWithAggregatesFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableWithAggregatesFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntWithAggregatesFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringWithAggregatesFilter"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "UserCreateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutAuthorInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutMembersInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutCreatorInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutAuthorNestedInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutMembersNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutCreatorNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserCreateManyInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUpdateManyMutationInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "GroupCreateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutCreatedGroupsInput"
          },
          "members": {
            "$ref": "#/components/schemas/UserCreateNestedManyWithoutMemberOfInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutGroupInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupUpdateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creator": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutCreatedGroupsNestedInput"
          },
          "members": {
            "$ref": "#/components/schemas/UserUpdateManyWithoutMemberOfNestedInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutGroupNestedInput"
          }
        }
      },
      "GroupCreateManyInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creatorId": {
            "type": "integer"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupUpdateManyMutationInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "PostCreateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutPostsInput"
          },
          "group": {
            "$ref": "#/components/schemas/GroupCreateNestedOneWithoutPostsInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutPostInput"
          }
        },
        "required": [
          "content",
          "group"
        ]
      },
      "PostUpdateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "author": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutPostsNestedInput"
          },
          "group": {
            "$ref": "#/components/schemas/GroupUpdateOneRequiredWithoutPostsNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutPostNestedInput"
          }
        }
      },
      "PostCreateManyInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          },
          "groupId": {
            "type": "integer"
          }
        },
        "required": [
          "content",
          "groupId"
        ]
      },
      "PostUpdateManyMutationInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "AuthCreateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutAuthsInput"
          },
          "post": {
            "$ref": "#/components/schemas/PostCreateNestedOneWithoutAuthsInput"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthUpdateInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserUpdateOneWithoutAuthsNestedInput"
          },
          "post": {
            "$ref": "#/components/schemas/PostUpdateOneWithoutAuthsNestedInput"
          }
        }
      },
      "AuthCreateManyInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthUpdateManyMutationInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "IntFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "integer"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntFilter"
              }
            ]
          }
        }
      },
      "StringFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "contains": {
            "type": "string"
          },
          "startsWith": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "not": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/NestedStringFilter"
              }
            ]
          }
        }
      },
      "DateTimeFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string",
            "format": "date-time"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "lt": {
            "type": "string",
            "format": "date-time"
          },
          "lte": {
            "type": "string",
            "format": "date-time"
          },
          "gt": {
            "type": "string",
            "format": "date-time"
          },
          "gte": {
            "type": "string",
            "format": "date-time"
          },
          "not": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/NestedDateTimeFilter"
              }
            ]
          }
        }
      },
      "PostListRelationFilter": {
        "type": "object",
        "properties": {
          "every": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "some": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "none": {
            "$ref": "#/components/schemas/PostWhereInput"
          }
        }
      },
      "GroupListRelationFilter": {
        "type": "object",
        "properties": {
          "every": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "some": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "none": {
            "$ref": "#/components/schemas/GroupWhereInput"
          }
        }
      },
      "AuthListRelationFilter": {
        "type": "object",
        "properties": {
          "every": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "some": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "none": {
            "$ref": "#/components/schemas/AuthWhereInput"
          }
        }
      },
      "PostOrderByRelationAggregateInput": {
        "type": "object",
        "properties": {
          "_count": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "GroupOrderByRelationAggregateInput": {
        "type": "object",
        "properties": {
          "_count": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "AuthOrderByRelationAggregateInput": {
        "type": "object",
        "properties": {
          "_count": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "IntWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "integer"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_avg": {
            "$ref": "#/components/schemas/NestedFloatFilter"
          },
          "_sum": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedIntFilter"
          }
        }
      },
      "StringWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "contains": {
            "type": "string"
          },
          "startsWith": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "not": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/NestedStringWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedStringFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedStringFilter"
          }
        }
      },
      "DateTimeWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string",
            "format": "date-time"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "lt": {
            "type": "string",
            "format": "date-time"
          },
          "lte": {
            "type": "string",
            "format": "date-time"
          },
          "gt": {
            "type": "string",
            "format": "date-time"
          },
          "gte": {
            "type": "string",
            "format": "date-time"
          },
          "not": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/NestedDateTimeWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedDateTimeFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedDateTimeFilter"
          }
        }
      },
      "UserScalarRelationFilter": {
        "type": "object",
        "properties": {
          "is": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "isNot": {
            "$ref": "#/components/schemas/UserWhereInput"
          }
        }
      },
      "UserListRelationFilter": {
        "type": "object",
        "properties": {
          "every": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "some": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "none": {
            "$ref": "#/components/schemas/UserWhereInput"
          }
        }
      },
      "UserOrderByRelationAggregateInput": {
        "type": "object",
        "properties": {
          "_count": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "GroupScalarRelationFilter": {
        "type": "object",
        "properties": {
          "is": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "isNot": {
            "$ref": "#/components/schemas/GroupWhereInput"
          }
        }
      },
      "IntNullableFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "notIn": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntNullableFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "UserNullableScalarRelationFilter": {
        "type": "object",
        "properties": {
          "is": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "isNot": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          }
        }
      },
      "PostNullableScalarRelationFilter": {
        "type": "object",
        "properties": {
          "is": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              }
            ]
          },
          "isNot": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              }
            ]
          }
        }
      },
      "SortOrderInput": {
        "type": "object",
        "properties": {
          "sort": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "nulls": {
            "$ref": "#/components/schemas/NullsOrder"
          }
        },
        "required": [
          "sort"
        ]
      },
      "IntNullableWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "notIn": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntNullableWithAggregatesFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_avg": {
            "$ref": "#/components/schemas/NestedFloatNullableFilter"
          },
          "_sum": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          }
        }
      },
      "PostCreateNestedManyWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyAuthorInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "GroupCreateNestedManyWithoutMembersInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "GroupCreateNestedManyWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/GroupCreateManyCreatorInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "AuthCreateNestedManyWithoutUserInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyUserInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "PostUncheckedCreateNestedManyWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyAuthorInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "GroupUncheckedCreateNestedManyWithoutMembersInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "GroupUncheckedCreateNestedManyWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/GroupCreateManyCreatorInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "AuthUncheckedCreateNestedManyWithoutUserInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyUserInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "StringFieldUpdateOperationsInput": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        }
      },
      "DateTimeFieldUpdateOperationsInput": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PostUpdateManyWithoutAuthorNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutAuthorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyAuthorInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutAuthorInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutAuthorInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "GroupUpdateManyWithoutMembersNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutMembersInput"
                }
              }
            ]
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutMembersInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutMembersInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "GroupUpdateManyWithoutCreatorNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutCreatorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/GroupCreateManyCreatorInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutCreatorInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutCreatorInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "AuthUpdateManyWithoutUserNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutUserInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyUserInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutUserInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutUserInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "IntFieldUpdateOperationsInput": {
        "type": "object",
        "properties": {
          "set": {
            "type": "integer"
          },
          "increment": {
            "type": "integer"
          },
          "decrement": {
            "type": "integer"
          },
          "multiply": {
            "type": "integer"
          },
          "divide": {
            "type": "integer"
          }
        }
      },
      "PostUncheckedUpdateManyWithoutAuthorNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthorInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutAuthorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyAuthorInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutAuthorInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutAuthorInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "GroupUncheckedUpdateManyWithoutMembersNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutMembersInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutMembersInput"
                }
              }
            ]
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutMembersInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutMembersInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutMembersInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "GroupUncheckedUpdateManyWithoutCreatorNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
                }
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateOrConnectWithoutCreatorInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpsertWithWhereUniqueWithoutCreatorInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/GroupCreateManyCreatorInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateWithWhereUniqueWithoutCreatorInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupUpdateManyWithWhereWithoutCreatorInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "AuthUncheckedUpdateManyWithoutUserNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutUserInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutUserInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyUserInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutUserInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutUserInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "UserCreateNestedOneWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutCreatedGroupsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutCreatedGroupsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          }
        }
      },
      "UserCreateNestedManyWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
                }
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "PostCreateNestedManyWithoutGroupInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyGroupInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "UserUncheckedCreateNestedManyWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
                }
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "PostUncheckedCreateNestedManyWithoutGroupInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyGroupInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "UserUpdateOneRequiredWithoutCreatedGroupsNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutCreatedGroupsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutCreatedGroupsInput"
          },
          "upsert": {
            "$ref": "#/components/schemas/UserUpsertWithoutCreatedGroupsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateToOneWithWhereWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUpdateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutCreatedGroupsInput"
              }
            ]
          }
        }
      },
      "UserUpdateManyWithoutMemberOfNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
                }
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpsertWithWhereUniqueWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpsertWithWhereUniqueWithoutMemberOfInput"
                }
              }
            ]
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithWhereUniqueWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpdateWithWhereUniqueWithoutMemberOfInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateManyWithWhereWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpdateManyWithWhereWithoutMemberOfInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "PostUpdateManyWithoutGroupNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutGroupInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyGroupInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutGroupInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutGroupInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "UserUncheckedUpdateManyWithoutMemberOfNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
                }
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateOrConnectWithoutMemberOfInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpsertWithWhereUniqueWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpsertWithWhereUniqueWithoutMemberOfInput"
                }
              }
            ]
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithWhereUniqueWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpdateWithWhereUniqueWithoutMemberOfInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateManyWithWhereWithoutMemberOfInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserUpdateManyWithWhereWithoutMemberOfInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "PostUncheckedUpdateManyWithoutGroupNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
                }
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateOrConnectWithoutGroupInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpsertWithWhereUniqueWithoutGroupInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/PostCreateManyGroupInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateWithWhereUniqueWithoutGroupInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostUpdateManyWithWhereWithoutGroupInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "UserCreateNestedOneWithoutPostsInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutPostsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          }
        }
      },
      "GroupCreateNestedOneWithoutPostsInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/GroupCreateOrConnectWithoutPostsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          }
        }
      },
      "AuthCreateNestedManyWithoutPostInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyPostInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "AuthUncheckedCreateNestedManyWithoutPostInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyPostInputEnvelope"
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          }
        }
      },
      "UserUpdateOneRequiredWithoutPostsNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutPostsInput"
          },
          "upsert": {
            "$ref": "#/components/schemas/UserUpsertWithoutPostsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateToOneWithWhereWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutPostsInput"
              }
            ]
          }
        }
      },
      "GroupUpdateOneRequiredWithoutPostsNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/GroupCreateOrConnectWithoutPostsInput"
          },
          "upsert": {
            "$ref": "#/components/schemas/GroupUpsertWithoutPostsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateToOneWithWhereWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutPostsInput"
              }
            ]
          }
        }
      },
      "AuthUpdateManyWithoutPostNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutPostInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyPostInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutPostInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutPostInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "AuthUncheckedUpdateManyWithoutPostNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
                }
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
                }
              }
            ]
          },
          "connectOrCreate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateOrConnectWithoutPostInput"
                }
              }
            ]
          },
          "upsert": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpsertWithWhereUniqueWithoutPostInput"
                }
              }
            ]
          },
          "createMany": {
            "$ref": "#/components/schemas/AuthCreateManyPostInputEnvelope"
          },
          "set": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "disconnect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "connect": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthWhereUniqueInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthWhereUniqueInput"
                }
              }
            ]
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateWithWhereUniqueWithoutPostInput"
                }
              }
            ]
          },
          "updateMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthUpdateManyWithWhereWithoutPostInput"
                }
              }
            ]
          },
          "deleteMany": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          }
        }
      },
      "UserCreateNestedOneWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutAuthsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          }
        }
      },
      "PostCreateNestedOneWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthsInput"
          },
          "connect": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          }
        }
      },
      "UserUpdateOneWithoutAuthsNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/UserCreateOrConnectWithoutAuthsInput"
          },
          "upsert": {
            "$ref": "#/components/schemas/UserUpsertWithoutAuthsInput"
          },
          "disconnect": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserWhereInput"
              }
            ]
          },
          "connect": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateToOneWithWhereWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutAuthsInput"
              }
            ]
          }
        }
      },
      "PostUpdateOneWithoutAuthsNestedInput": {
        "type": "object",
        "properties": {
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "connectOrCreate": {
            "$ref": "#/components/schemas/PostCreateOrConnectWithoutAuthsInput"
          },
          "upsert": {
            "$ref": "#/components/schemas/PostUpsertWithoutAuthsInput"
          },
          "disconnect": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              }
            ]
          },
          "delete": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostWhereInput"
              }
            ]
          },
          "connect": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateToOneWithWhereWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutAuthsInput"
              }
            ]
          }
        }
      },
      "NullableIntFieldUpdateOperationsInput": {
        "type": "object",
        "properties": {
          "set": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "increment": {
            "type": "integer"
          },
          "decrement": {
            "type": "integer"
          },
          "multiply": {
            "type": "integer"
          },
          "divide": {
            "type": "integer"
          }
        }
      },
      "NestedIntFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "integer"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntFilter"
              }
            ]
          }
        }
      },
      "NestedStringFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "contains": {
            "type": "string"
          },
          "startsWith": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "not": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/NestedStringFilter"
              }
            ]
          }
        }
      },
      "NestedDateTimeFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string",
            "format": "date-time"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "lt": {
            "type": "string",
            "format": "date-time"
          },
          "lte": {
            "type": "string",
            "format": "date-time"
          },
          "gt": {
            "type": "string",
            "format": "date-time"
          },
          "gte": {
            "type": "string",
            "format": "date-time"
          },
          "not": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/NestedDateTimeFilter"
              }
            ]
          }
        }
      },
      "NestedIntWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "integer"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_avg": {
            "$ref": "#/components/schemas/NestedFloatFilter"
          },
          "_sum": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedIntFilter"
          }
        }
      },
      "NestedFloatFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "number"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "lt": {
            "type": "number"
          },
          "lte": {
            "type": "number"
          },
          "gt": {
            "type": "number"
          },
          "gte": {
            "type": "number"
          },
          "not": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/NestedFloatFilter"
              }
            ]
          }
        }
      },
      "NestedStringWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "contains": {
            "type": "string"
          },
          "startsWith": {
            "type": "string"
          },
          "endsWith": {
            "type": "string"
          },
          "not": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/NestedStringWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedStringFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedStringFilter"
          }
        }
      },
      "NestedDateTimeWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "type": "string",
            "format": "date-time"
          },
          "in": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "notIn": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "lt": {
            "type": "string",
            "format": "date-time"
          },
          "lte": {
            "type": "string",
            "format": "date-time"
          },
          "gt": {
            "type": "string",
            "format": "date-time"
          },
          "gte": {
            "type": "string",
            "format": "date-time"
          },
          "not": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/NestedDateTimeWithAggregatesFilter"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedDateTimeFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedDateTimeFilter"
          }
        }
      },
      "NestedIntNullableFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "notIn": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntNullableFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "NestedIntNullableWithAggregatesFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "notIn": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            ]
          },
          "lt": {
            "type": "integer"
          },
          "lte": {
            "type": "integer"
          },
          "gt": {
            "type": "integer"
          },
          "gte": {
            "type": "integer"
          },
          "not": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NestedIntNullableWithAggregatesFilter"
              },
              {
                "type": "null"
              }
            ]
          },
          "_count": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_avg": {
            "$ref": "#/components/schemas/NestedFloatNullableFilter"
          },
          "_sum": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_min": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          },
          "_max": {
            "$ref": "#/components/schemas/NestedIntNullableFilter"
          }
        }
      },
      "NestedFloatNullableFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            ]
          },
          "notIn": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            ]
          },
          "lt": {
            "type": "number"
          },
          "lte": {
            "type": "number"
          },
          "gt": {
            "type": "number"
          },
          "gte": {
            "type": "number"
          },
          "not": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/NestedFloatNullableFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PostCreateWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/GroupCreateNestedOneWithoutPostsInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutPostInput"
          }
        },
        "required": [
          "content",
          "group"
        ]
      },
      "PostUncheckedCreateWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "groupId": {
            "type": "integer"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedCreateNestedManyWithoutPostInput"
          }
        },
        "required": [
          "content",
          "groupId"
        ]
      },
      "PostCreateOrConnectWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "PostCreateManyAuthorInputEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateManyAuthorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateManyAuthorInput"
                }
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "GroupCreateWithoutMembersInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutCreatedGroupsInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutGroupInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupUncheckedCreateWithoutMembersInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creatorId": {
            "type": "integer"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedCreateNestedManyWithoutGroupInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupCreateOrConnectWithoutMembersInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "GroupCreateWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "members": {
            "$ref": "#/components/schemas/UserCreateNestedManyWithoutMemberOfInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutGroupInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupUncheckedCreateWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "members": {
            "$ref": "#/components/schemas/UserUncheckedCreateNestedManyWithoutMemberOfInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedCreateNestedManyWithoutGroupInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupCreateOrConnectWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "GroupCreateManyCreatorInputEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateManyCreatorInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateManyCreatorInput"
                }
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "AuthCreateWithoutUserInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/PostCreateNestedOneWithoutAuthsInput"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthUncheckedCreateWithoutUserInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthCreateOrConnectWithoutUserInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "AuthCreateManyUserInputEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateManyUserInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateManyUserInput"
                }
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUpsertWithWhereUniqueWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutAuthorInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutAuthorInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthorInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "PostUpdateWithWhereUniqueWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutAuthorInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutAuthorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "PostUpdateManyWithWhereWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutAuthorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "PostScalarWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostScalarWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostScalarWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "GroupUpsertWithWhereUniqueWithoutMembersInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutMembersInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutMembersInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutMembersInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutMembersInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "GroupUpdateWithWhereUniqueWithoutMembersInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutMembersInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutMembersInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "GroupUpdateManyWithWhereWithoutMembersInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutMembersInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "GroupScalarWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupScalarWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupScalarWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "GroupUpsertWithWhereUniqueWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutCreatorInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutCreatorInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutCreatorInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutCreatorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "GroupUpdateWithWhereUniqueWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutCreatorInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutCreatorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "GroupUpdateManyWithWhereWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutCreatorInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "AuthUpsertWithWhereUniqueWithoutUserInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithoutUserInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateWithoutUserInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutUserInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutUserInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "AuthUpdateWithWhereUniqueWithoutUserInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithoutUserInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateWithoutUserInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "AuthUpdateManyWithWhereWithoutUserInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutUserInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "AuthScalarWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthScalarWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthScalarWhereInput"
                }
              }
            ]
          },
          "idd": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntNullableFilter"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "UserCreateWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutAuthorInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutMembersInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUncheckedCreateWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedCreateNestedManyWithoutAuthorInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutMembersInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserCreateOrConnectWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutCreatedGroupsInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "UserCreateWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutAuthorInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutCreatorInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUncheckedCreateWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedCreateNestedManyWithoutAuthorInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutCreatorInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserCreateOrConnectWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "PostCreateWithoutGroupInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutPostsInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutPostInput"
          }
        },
        "required": [
          "content"
        ]
      },
      "PostUncheckedCreateWithoutGroupInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedCreateNestedManyWithoutPostInput"
          }
        },
        "required": [
          "content"
        ]
      },
      "PostCreateOrConnectWithoutGroupInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "PostCreateManyGroupInputEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateManyGroupInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateManyGroupInput"
                }
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UserUpsertWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutCreatedGroupsInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutCreatedGroupsInput"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          }
        },
        "required": [
          "update",
          "create"
        ]
      },
      "UserUpdateToOneWithWhereWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutCreatedGroupsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutCreatedGroupsInput"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UserUpdateWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutAuthorNestedInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutMembersNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserUncheckedUpdateWithoutCreatedGroupsInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutAuthorNestedInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutMembersNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserUpsertWithWhereUniqueWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutMemberOfInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutMemberOfInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutMemberOfInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutMemberOfInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "UserUpdateWithWhereUniqueWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutMemberOfInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutMemberOfInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "UserUpdateManyWithWhereWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateManyWithoutMemberOfInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "UserScalarWhereInput": {
        "type": "object",
        "properties": {
          "AND": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereInput"
                }
              }
            ]
          },
          "OR": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserScalarWhereInput"
            }
          },
          "NOT": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserScalarWhereInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserScalarWhereInput"
                }
              }
            ]
          },
          "id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntFilter"
              },
              {
                "type": "integer"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/StringFilter"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DateTimeFilter"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        }
      },
      "PostUpsertWithWhereUniqueWithoutGroupInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutGroupInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutGroupInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutGroupInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutGroupInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "PostUpdateWithWhereUniqueWithoutGroupInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutGroupInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutGroupInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "PostUpdateManyWithWhereWithoutGroupInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutGroupInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "UserCreateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutMembersInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutCreatorInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUncheckedCreateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutMembersInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutCreatorInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedCreateNestedManyWithoutUserInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserCreateOrConnectWithoutPostsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutPostsInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "GroupCreateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creator": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutCreatedGroupsInput"
          },
          "members": {
            "$ref": "#/components/schemas/UserCreateNestedManyWithoutMemberOfInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupUncheckedCreateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creatorId": {
            "type": "integer"
          },
          "members": {
            "$ref": "#/components/schemas/UserUncheckedCreateNestedManyWithoutMemberOfInput"
          }
        },
        "required": [
          "name"
        ]
      },
      "GroupCreateOrConnectWithoutPostsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutPostsInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "AuthCreateWithoutPostInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutAuthsInput"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthUncheckedCreateWithoutPostInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthCreateOrConnectWithoutPostInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "AuthCreateManyPostInputEnvelope": {
        "type": "object",
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateManyPostInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateManyPostInput"
                }
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UserUpsertWithoutPostsInput": {
        "type": "object",
        "properties": {
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutPostsInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          }
        },
        "required": [
          "update",
          "create"
        ]
      },
      "UserUpdateToOneWithWhereWithoutPostsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutPostsInput"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UserUpdateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutMembersNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutCreatorNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserUncheckedUpdateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutMembersNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutCreatorNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "GroupUpsertWithoutPostsInput": {
        "type": "object",
        "properties": {
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutPostsInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedCreateWithoutPostsInput"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          }
        },
        "required": [
          "update",
          "create"
        ]
      },
      "GroupUpdateToOneWithWhereWithoutPostsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupUpdateWithoutPostsInput"
              },
              {
                "$ref": "#/components/schemas/GroupUncheckedUpdateWithoutPostsInput"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "GroupUpdateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creator": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutCreatedGroupsNestedInput"
          },
          "members": {
            "$ref": "#/components/schemas/UserUpdateManyWithoutMemberOfNestedInput"
          }
        }
      },
      "GroupUncheckedUpdateWithoutPostsInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "members": {
            "$ref": "#/components/schemas/UserUncheckedUpdateManyWithoutMemberOfNestedInput"
          }
        }
      },
      "AuthUpsertWithWhereUniqueWithoutPostInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithoutPostInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateWithoutPostInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateWithoutPostInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedCreateWithoutPostInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "update",
          "create"
        ]
      },
      "AuthUpdateWithWhereUniqueWithoutPostInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateWithoutPostInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateWithoutPostInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "AuthUpdateManyWithWhereWithoutPostInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthScalarWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthUpdateManyMutationInput"
              },
              {
                "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutPostInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "data"
        ]
      },
      "UserCreateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostCreateNestedManyWithoutAuthorInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutMembersInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupCreateNestedManyWithoutCreatorInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserUncheckedCreateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedCreateNestedManyWithoutAuthorInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutMembersInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedCreateNestedManyWithoutCreatorInput"
          }
        },
        "required": [
          "name",
          "password",
          "email"
        ]
      },
      "UserCreateOrConnectWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutAuthsInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "PostCreateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserCreateNestedOneWithoutPostsInput"
          },
          "group": {
            "$ref": "#/components/schemas/GroupCreateNestedOneWithoutPostsInput"
          }
        },
        "required": [
          "content",
          "group"
        ]
      },
      "PostUncheckedCreateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          },
          "groupId": {
            "type": "integer"
          }
        },
        "required": [
          "content",
          "groupId"
        ]
      },
      "PostCreateOrConnectWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthsInput"
              }
            ]
          }
        },
        "required": [
          "where",
          "create"
        ]
      },
      "UserUpsertWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutAuthsInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          }
        },
        "required": [
          "update",
          "create"
        ]
      },
      "UserUpdateToOneWithWhereWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/UserUncheckedUpdateWithoutAuthsInput"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "UserUpdateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutAuthorNestedInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutMembersNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutCreatorNestedInput"
          }
        }
      },
      "UserUncheckedUpdateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutAuthorNestedInput"
          },
          "memberOf": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutMembersNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutCreatorNestedInput"
          }
        }
      },
      "PostUpsertWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "update": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutAuthsInput"
              }
            ]
          },
          "create": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedCreateWithoutAuthsInput"
              }
            ]
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          }
        },
        "required": [
          "update",
          "create"
        ]
      },
      "PostUpdateToOneWithWhereWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostUpdateWithoutAuthsInput"
              },
              {
                "$ref": "#/components/schemas/PostUncheckedUpdateWithoutAuthsInput"
              }
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "PostUpdateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "author": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutPostsNestedInput"
          },
          "group": {
            "$ref": "#/components/schemas/GroupUpdateOneRequiredWithoutPostsNestedInput"
          }
        }
      },
      "PostUncheckedUpdateWithoutAuthsInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "PostCreateManyAuthorInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "groupId": {
            "type": "integer"
          }
        },
        "required": [
          "content",
          "groupId"
        ]
      },
      "GroupCreateManyCreatorInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "AuthCreateManyUserInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "PostUpdateWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "group": {
            "$ref": "#/components/schemas/GroupUpdateOneRequiredWithoutPostsNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutPostNestedInput"
          }
        }
      },
      "PostUncheckedUpdateWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutPostNestedInput"
          }
        }
      },
      "PostUncheckedUpdateManyWithoutAuthorInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "GroupUpdateWithoutMembersInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creator": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutCreatedGroupsNestedInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutGroupNestedInput"
          }
        }
      },
      "GroupUncheckedUpdateWithoutMembersInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutGroupNestedInput"
          }
        }
      },
      "GroupUncheckedUpdateManyWithoutMembersInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "GroupUpdateWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "members": {
            "$ref": "#/components/schemas/UserUpdateManyWithoutMemberOfNestedInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutGroupNestedInput"
          }
        }
      },
      "GroupUncheckedUpdateWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "members": {
            "$ref": "#/components/schemas/UserUncheckedUpdateManyWithoutMemberOfNestedInput"
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutGroupNestedInput"
          }
        }
      },
      "GroupUncheckedUpdateManyWithoutCreatorInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "AuthUpdateWithoutUserInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "post": {
            "$ref": "#/components/schemas/PostUpdateOneWithoutAuthsNestedInput"
          }
        }
      },
      "AuthUncheckedUpdateWithoutUserInput": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NullableIntFieldUpdateOperationsInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "AuthUncheckedUpdateManyWithoutUserInput": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NullableIntFieldUpdateOperationsInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "PostCreateManyGroupInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          }
        },
        "required": [
          "content"
        ]
      },
      "UserUpdateWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUpdateManyWithoutAuthorNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUpdateManyWithoutCreatorNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserUncheckedUpdateWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "posts": {
            "$ref": "#/components/schemas/PostUncheckedUpdateManyWithoutAuthorNestedInput"
          },
          "createdGroups": {
            "$ref": "#/components/schemas/GroupUncheckedUpdateManyWithoutCreatorNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutUserNestedInput"
          }
        }
      },
      "UserUncheckedUpdateManyWithoutMemberOfInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "PostUpdateWithoutGroupInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "author": {
            "$ref": "#/components/schemas/UserUpdateOneRequiredWithoutPostsNestedInput"
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUpdateManyWithoutPostNestedInput"
          }
        }
      },
      "PostUncheckedUpdateWithoutGroupInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "auths": {
            "$ref": "#/components/schemas/AuthUncheckedUpdateManyWithoutPostNestedInput"
          }
        }
      },
      "PostUncheckedUpdateManyWithoutGroupInput": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "AuthCreateManyPostInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          }
        },
        "required": [
          "authId",
          "crud"
        ]
      },
      "AuthUpdateWithoutPostInput": {
        "type": "object",
        "properties": {
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserUpdateOneWithoutAuthsNestedInput"
          }
        }
      },
      "AuthUncheckedUpdateWithoutPostInput": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NullableIntFieldUpdateOperationsInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "AuthUncheckedUpdateManyWithoutPostInput": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "$ref": "#/components/schemas/DateTimeFieldUpdateOperationsInput"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/NullableIntFieldUpdateOperationsInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/IntFieldUpdateOperationsInput"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/StringFieldUpdateOperationsInput"
              }
            ]
          }
        }
      },
      "UserDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          }
        }
      },
      "GroupDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          }
        }
      },
      "PostDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          }
        }
      },
      "UserInclude": {
        "type": "object",
        "properties": {
          "posts": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostFindManyArgs"
              }
            ]
          },
          "memberOf": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupFindManyArgs"
              }
            ]
          },
          "createdGroups": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupFindManyArgs"
              }
            ]
          },
          "auths": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "GroupInclude": {
        "type": "object",
        "properties": {
          "creator": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "members": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserFindManyArgs"
              }
            ]
          },
          "posts": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "PostInclude": {
        "type": "object",
        "properties": {
          "author": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "group": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupDefaultArgs"
              }
            ]
          },
          "auths": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "AuthInclude": {
        "type": "object",
        "properties": {
          "user": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "post": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostDefaultArgs"
              }
            ]
          }
        }
      },
      "UserCountOutputTypeSelect": {
        "type": "object",
        "properties": {
          "posts": {
            "type": "boolean"
          },
          "memberOf": {
            "type": "boolean"
          },
          "createdGroups": {
            "type": "boolean"
          },
          "auths": {
            "type": "boolean"
          }
        }
      },
      "GroupCountOutputTypeSelect": {
        "type": "object",
        "properties": {
          "members": {
            "type": "boolean"
          },
          "posts": {
            "type": "boolean"
          }
        }
      },
      "PostCountOutputTypeSelect": {
        "type": "object",
        "properties": {
          "auths": {
            "type": "boolean"
          }
        }
      },
      "UserCountOutputTypeDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserCountOutputTypeSelect"
          }
        }
      },
      "GroupCountOutputTypeDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupCountOutputTypeSelect"
          }
        }
      },
      "PostCountOutputTypeDefaultArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostCountOutputTypeSelect"
          }
        }
      },
      "UserSelect": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "password": {
            "type": "boolean"
          },
          "email": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "posts": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostFindManyArgs"
              }
            ]
          },
          "memberOf": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupFindManyArgs"
              }
            ]
          },
          "createdGroups": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupFindManyArgs"
              }
            ]
          },
          "auths": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "GroupSelect": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "creator": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "creatorId": {
            "type": "boolean"
          },
          "members": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserFindManyArgs"
              }
            ]
          },
          "posts": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "PostSelect": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "content": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "author": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "groupId": {
            "type": "boolean"
          },
          "group": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupDefaultArgs"
              }
            ]
          },
          "auths": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthFindManyArgs"
              }
            ]
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostCountOutputTypeDefaultArgs"
              }
            ]
          }
        }
      },
      "AuthSelect": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "user": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserDefaultArgs"
              }
            ]
          },
          "postId": {
            "type": "boolean"
          },
          "post": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostDefaultArgs"
              }
            ]
          },
          "authId": {
            "type": "boolean"
          },
          "crud": {
            "type": "boolean"
          }
        }
      },
      "UserCountAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "password": {
            "type": "boolean"
          },
          "email": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "_all": {
            "type": "boolean"
          }
        }
      },
      "UserAvgAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          }
        }
      },
      "UserSumAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          }
        }
      },
      "UserMinAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "password": {
            "type": "boolean"
          },
          "email": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          }
        }
      },
      "UserMaxAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "password": {
            "type": "boolean"
          },
          "email": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          }
        }
      },
      "GroupCountAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "creatorId": {
            "type": "boolean"
          },
          "_all": {
            "type": "boolean"
          }
        }
      },
      "GroupAvgAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "creatorId": {
            "type": "boolean"
          }
        }
      },
      "GroupSumAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "creatorId": {
            "type": "boolean"
          }
        }
      },
      "GroupMinAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "creatorId": {
            "type": "boolean"
          }
        }
      },
      "GroupMaxAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "creatorId": {
            "type": "boolean"
          }
        }
      },
      "PostCountAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "content": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "groupId": {
            "type": "boolean"
          },
          "_all": {
            "type": "boolean"
          }
        }
      },
      "PostAvgAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "groupId": {
            "type": "boolean"
          }
        }
      },
      "PostSumAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "groupId": {
            "type": "boolean"
          }
        }
      },
      "PostMinAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "content": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "groupId": {
            "type": "boolean"
          }
        }
      },
      "PostMaxAggregateInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "content": {
            "type": "boolean"
          },
          "authorId": {
            "type": "boolean"
          },
          "groupId": {
            "type": "boolean"
          }
        }
      },
      "AuthCountAggregateInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "postId": {
            "type": "boolean"
          },
          "authId": {
            "type": "boolean"
          },
          "crud": {
            "type": "boolean"
          },
          "_all": {
            "type": "boolean"
          }
        }
      },
      "AuthAvgAggregateInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "postId": {
            "type": "boolean"
          },
          "authId": {
            "type": "boolean"
          }
        }
      },
      "AuthSumAggregateInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "postId": {
            "type": "boolean"
          },
          "authId": {
            "type": "boolean"
          }
        }
      },
      "AuthMinAggregateInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "postId": {
            "type": "boolean"
          },
          "authId": {
            "type": "boolean"
          },
          "crud": {
            "type": "boolean"
          }
        }
      },
      "AuthMaxAggregateInput": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "boolean"
          },
          "userId": {
            "type": "boolean"
          },
          "postId": {
            "type": "boolean"
          },
          "authId": {
            "type": "boolean"
          },
          "crud": {
            "type": "boolean"
          }
        }
      },
      "AggregateUser": {
        "type": "object",
        "properties": {
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserMaxAggregateOutputType"
              }
            ]
          }
        }
      },
      "UserGroupByOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UserMaxAggregateOutputType"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "password",
          "email",
          "createdAt",
          "updatedAt"
        ]
      },
      "AggregateGroup": {
        "type": "object",
        "properties": {
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupMaxAggregateOutputType"
              }
            ]
          }
        }
      },
      "GroupGroupByOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "creatorId": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GroupMaxAggregateOutputType"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "creatorId"
        ]
      },
      "AggregatePost": {
        "type": "object",
        "properties": {
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostMaxAggregateOutputType"
              }
            ]
          }
        }
      },
      "PostGroupByOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "type": "string"
          },
          "authorId": {
            "type": "integer"
          },
          "groupId": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PostMaxAggregateOutputType"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "content",
          "authorId",
          "groupId"
        ]
      },
      "AggregateAuth": {
        "type": "object",
        "properties": {
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthMaxAggregateOutputType"
              }
            ]
          }
        }
      },
      "AuthGroupByOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "string"
          },
          "_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthCountAggregateOutputType"
              }
            ]
          },
          "_avg": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthAvgAggregateOutputType"
              }
            ]
          },
          "_sum": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthSumAggregateOutputType"
              }
            ]
          },
          "_min": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthMinAggregateOutputType"
              }
            ]
          },
          "_max": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AuthMaxAggregateOutputType"
              }
            ]
          }
        },
        "required": [
          "idd",
          "createdAt",
          "updatedAt",
          "authId",
          "crud"
        ]
      },
      "UserCountAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "integer"
          },
          "password": {
            "type": "integer"
          },
          "email": {
            "type": "integer"
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer"
          },
          "_all": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "password",
          "email",
          "createdAt",
          "updatedAt",
          "_all"
        ]
      },
      "UserAvgAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "UserSumAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "UserMinAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        }
      },
      "UserMaxAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "email": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        }
      },
      "GroupCountAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer"
          },
          "name": {
            "type": "integer"
          },
          "creatorId": {
            "type": "integer"
          },
          "_all": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "creatorId",
          "_all"
        ]
      },
      "GroupAvgAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "GroupSumAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "GroupMinAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "GroupMaxAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "creatorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "PostCountAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer"
          },
          "content": {
            "type": "integer"
          },
          "authorId": {
            "type": "integer"
          },
          "groupId": {
            "type": "integer"
          },
          "_all": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "content",
          "authorId",
          "groupId",
          "_all"
        ]
      },
      "PostAvgAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "PostSumAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "PostMinAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "PostMaxAggregateOutputType": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "content": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "authorId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "groupId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "AuthCountAggregateOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "type": "integer"
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "postId": {
            "type": "integer"
          },
          "authId": {
            "type": "integer"
          },
          "crud": {
            "type": "integer"
          },
          "_all": {
            "type": "integer"
          }
        },
        "required": [
          "idd",
          "createdAt",
          "updatedAt",
          "userId",
          "postId",
          "authId",
          "crud",
          "_all"
        ]
      },
      "AuthAvgAggregateOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "AuthSumAggregateOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      },
      "AuthMinAggregateOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "AuthMaxAggregateOutputType": {
        "type": "object",
        "properties": {
          "idd": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "postId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "authId": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "crud": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "_Meta": {
        "type": "object",
        "description": "Meta information about the request or response",
        "properties": {
          "serialization": {
            "description": "Serialization metadata"
          }
        },
        "additionalProperties": true
      },
      "_Error": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "prisma": {
                "type": "boolean",
                "description": "Indicates if the error occurred during a Prisma call"
              },
              "rejectedByPolicy": {
                "type": "boolean",
                "description": "Indicates if the error was due to rejection by a policy"
              },
              "code": {
                "type": "string",
                "description": "Prisma error code. Only available when \"prisma\" field is true."
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "reason": {
                "type": "string",
                "description": "Detailed error reason"
              },
              "zodErrors": {
                "type": "object",
                "additionalProperties": true,
                "description": "Zod validation errors if the error is due to data validation failure"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "BatchPayload": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        }
      },
      "UserCreateArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "data": {
            "$ref": "#/components/schemas/UserCreateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserCreateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCreateManyInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCreateManyInput"
                }
              }
            ]
          },
          "skipDuplicates": {
            "type": "boolean",
            "description": "Do not insert records with unique fields or ID fields that already exist."
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserFindUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserFindFirstArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserFindManyArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserUpdateArgs": {
        "type": "object",
        "required": [
          "where",
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "data": {
            "$ref": "#/components/schemas/UserUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserUpdateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "data": {
            "$ref": "#/components/schemas/UserUpdateManyMutationInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserUpsertArgs": {
        "type": "object",
        "required": [
          "create",
          "update",
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "create": {
            "$ref": "#/components/schemas/UserCreateInput"
          },
          "update": {
            "$ref": "#/components/schemas/UserUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserDeleteUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "include": {
            "$ref": "#/components/schemas/UserInclude"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserDeleteManyArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserCountArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/UserSelect"
          },
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserAggregateArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/UserOrderByWithRelationInput"
          },
          "cursor": {
            "$ref": "#/components/schemas/UserWhereUniqueInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/UserMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/UserMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/UserSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/UserAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "UserGroupByArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/UserWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/UserOrderByWithRelationInput"
          },
          "by": {
            "$ref": "#/components/schemas/UserScalarFieldEnum"
          },
          "having": {
            "$ref": "#/components/schemas/UserScalarWhereWithAggregatesInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/UserCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/UserMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/UserMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/UserSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/UserAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupCreateArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "data": {
            "$ref": "#/components/schemas/GroupCreateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupCreateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GroupCreateManyInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupCreateManyInput"
                }
              }
            ]
          },
          "skipDuplicates": {
            "type": "boolean",
            "description": "Do not insert records with unique fields or ID fields that already exist."
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupFindUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupFindFirstArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupFindManyArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupUpdateArgs": {
        "type": "object",
        "required": [
          "where",
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "data": {
            "$ref": "#/components/schemas/GroupUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupUpdateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "data": {
            "$ref": "#/components/schemas/GroupUpdateManyMutationInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupUpsertArgs": {
        "type": "object",
        "required": [
          "create",
          "update",
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "create": {
            "$ref": "#/components/schemas/GroupCreateInput"
          },
          "update": {
            "$ref": "#/components/schemas/GroupUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupDeleteUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "include": {
            "$ref": "#/components/schemas/GroupInclude"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupDeleteManyArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupCountArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/GroupSelect"
          },
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupAggregateArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/GroupOrderByWithRelationInput"
          },
          "cursor": {
            "$ref": "#/components/schemas/GroupWhereUniqueInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/GroupMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/GroupMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/GroupSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/GroupAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "GroupGroupByArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GroupWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/GroupOrderByWithRelationInput"
          },
          "by": {
            "$ref": "#/components/schemas/GroupScalarFieldEnum"
          },
          "having": {
            "$ref": "#/components/schemas/GroupScalarWhereWithAggregatesInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/GroupCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/GroupMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/GroupMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/GroupSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/GroupAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostCreateArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "data": {
            "$ref": "#/components/schemas/PostCreateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostCreateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PostCreateManyInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PostCreateManyInput"
                }
              }
            ]
          },
          "skipDuplicates": {
            "type": "boolean",
            "description": "Do not insert records with unique fields or ID fields that already exist."
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostFindUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostFindFirstArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostFindManyArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostUpdateArgs": {
        "type": "object",
        "required": [
          "where",
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "data": {
            "$ref": "#/components/schemas/PostUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostUpdateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "data": {
            "$ref": "#/components/schemas/PostUpdateManyMutationInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostUpsertArgs": {
        "type": "object",
        "required": [
          "create",
          "update",
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "create": {
            "$ref": "#/components/schemas/PostCreateInput"
          },
          "update": {
            "$ref": "#/components/schemas/PostUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostDeleteUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "include": {
            "$ref": "#/components/schemas/PostInclude"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostDeleteManyArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostCountArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/PostSelect"
          },
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostAggregateArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/PostOrderByWithRelationInput"
          },
          "cursor": {
            "$ref": "#/components/schemas/PostWhereUniqueInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/PostMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/PostMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/PostSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/PostAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "PostGroupByArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/PostWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/PostOrderByWithRelationInput"
          },
          "by": {
            "$ref": "#/components/schemas/PostScalarFieldEnum"
          },
          "having": {
            "$ref": "#/components/schemas/PostScalarWhereWithAggregatesInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/PostCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/PostMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/PostMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/PostSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/PostAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthCreateArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "data": {
            "$ref": "#/components/schemas/AuthCreateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthCreateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthCreateManyInput"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthCreateManyInput"
                }
              }
            ]
          },
          "skipDuplicates": {
            "type": "boolean",
            "description": "Do not insert records with unique fields or ID fields that already exist."
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthFindUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthFindFirstArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthFindManyArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthUpdateArgs": {
        "type": "object",
        "required": [
          "where",
          "data"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "data": {
            "$ref": "#/components/schemas/AuthUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthUpdateManyArgs": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "data": {
            "$ref": "#/components/schemas/AuthUpdateManyMutationInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthUpsertArgs": {
        "type": "object",
        "required": [
          "create",
          "update",
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "create": {
            "$ref": "#/components/schemas/AuthCreateInput"
          },
          "update": {
            "$ref": "#/components/schemas/AuthUpdateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthDeleteUniqueArgs": {
        "type": "object",
        "required": [
          "where"
        ],
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "include": {
            "$ref": "#/components/schemas/AuthInclude"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthDeleteManyArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthCountArgs": {
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/AuthSelect"
          },
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthAggregateArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/AuthOrderByWithRelationInput"
          },
          "cursor": {
            "$ref": "#/components/schemas/AuthWhereUniqueInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/AuthMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/AuthMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/AuthSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/AuthAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      },
      "AuthGroupByArgs": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AuthWhereInput"
          },
          "orderBy": {
            "$ref": "#/components/schemas/AuthOrderByWithRelationInput"
          },
          "by": {
            "$ref": "#/components/schemas/AuthScalarFieldEnum"
          },
          "having": {
            "$ref": "#/components/schemas/AuthScalarWhereWithAggregatesInput"
          },
          "take": {
            "type": "integer"
          },
          "skip": {
            "type": "integer"
          },
          "_count": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/AuthCountAggregateInput"
              }
            ]
          },
          "_min": {
            "$ref": "#/components/schemas/AuthMinAggregateInput"
          },
          "_max": {
            "$ref": "#/components/schemas/AuthMaxAggregateInput"
          },
          "_sum": {
            "$ref": "#/components/schemas/AuthSumAggregateInput"
          },
          "_avg": {
            "$ref": "#/components/schemas/AuthAvgAggregateInput"
          },
          "meta": {
            "$ref": "#/components/schemas/_Meta"
          }
        }
      }
    }
  },
  "paths": {
    "/user/create": {
      "post": {
        "operationId": "createUser",
        "description": "Create a new User",
        "tags": [
          "user"
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateArgs"
              }
            }
          }
        }
      }
    },
    "/user/createMany": {
      "post": {
        "operationId": "createManyUser",
        "description": "Create several User",
        "tags": [
          "user"
        ],
        "security": [],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateManyArgs"
              }
            }
          }
        }
      }
    },
    "/user/findUnique": {
      "get": {
        "operationId": "findUniqueUser",
        "description": "Find one unique User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFindUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/findFirst": {
      "get": {
        "operationId": "findFirstUser",
        "description": "Find the first User matching the given condition",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFindFirstArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/findMany": {
      "get": {
        "operationId": "findManyUser",
        "description": "Find a list of User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFindManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/update": {
      "patch": {
        "operationId": "updateUser",
        "description": "Update a User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateArgs"
              }
            }
          }
        }
      }
    },
    "/user/updateMany": {
      "patch": {
        "operationId": "updateManyUser",
        "description": "Update Users matching the given condition",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateManyArgs"
              }
            }
          }
        }
      }
    },
    "/user/upsert": {
      "post": {
        "operationId": "upsertUser",
        "description": "Upsert a User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpsertArgs"
              }
            }
          }
        }
      }
    },
    "/user/delete": {
      "delete": {
        "operationId": "deleteUser",
        "description": "Delete one unique User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeleteUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/deleteMany": {
      "delete": {
        "operationId": "deleteManyUser",
        "description": "Delete Users matching the given condition",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeleteManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/count": {
      "get": {
        "operationId": "countUser",
        "description": "Find a list of User",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "$ref": "#/components/schemas/UserCountAggregateOutputType"
                        }
                      ],
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCountArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/aggregate": {
      "get": {
        "operationId": "aggregateUser",
        "description": "Aggregate Users",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AggregateUser",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAggregateArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/user/groupBy": {
      "get": {
        "operationId": "groupByUser",
        "description": "Group Users by fields",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserGroupByOutputType"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupByArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/create": {
      "post": {
        "operationId": "createGroup",
        "description": "Create a new Group",
        "tags": [
          "group"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateArgs"
              }
            }
          }
        }
      }
    },
    "/group/createMany": {
      "post": {
        "operationId": "createManyGroup",
        "description": "Create several Group",
        "tags": [
          "group"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateManyArgs"
              }
            }
          }
        }
      }
    },
    "/group/findUnique": {
      "get": {
        "operationId": "findUniqueGroup",
        "description": "Find one unique Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFindUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/findFirst": {
      "get": {
        "operationId": "findFirstGroup",
        "description": "Find the first Group matching the given condition",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFindFirstArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/findMany": {
      "get": {
        "operationId": "findManyGroup",
        "description": "Find a list of Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFindManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/update": {
      "patch": {
        "operationId": "updateGroup",
        "description": "Update a Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateArgs"
              }
            }
          }
        }
      }
    },
    "/group/updateMany": {
      "patch": {
        "operationId": "updateManyGroup",
        "description": "Update Groups matching the given condition",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateManyArgs"
              }
            }
          }
        }
      }
    },
    "/group/upsert": {
      "post": {
        "operationId": "upsertGroup",
        "description": "Upsert a Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpsertArgs"
              }
            }
          }
        }
      }
    },
    "/group/delete": {
      "delete": {
        "operationId": "deleteGroup",
        "description": "Delete one unique Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Group",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDeleteUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/deleteMany": {
      "delete": {
        "operationId": "deleteManyGroup",
        "description": "Delete Groups matching the given condition",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDeleteManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/count": {
      "get": {
        "operationId": "countGroup",
        "description": "Find a list of Group",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "$ref": "#/components/schemas/GroupCountAggregateOutputType"
                        }
                      ],
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCountArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/aggregate": {
      "get": {
        "operationId": "aggregateGroup",
        "description": "Aggregate Groups",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AggregateGroup",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupAggregateArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/group/groupBy": {
      "get": {
        "operationId": "groupByGroup",
        "description": "Group Groups by fields",
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupGroupByOutputType"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupGroupByArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/create": {
      "post": {
        "operationId": "createPost",
        "description": "Create a new Post",
        "tags": [
          "post"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateArgs"
              }
            }
          }
        }
      }
    },
    "/post/createMany": {
      "post": {
        "operationId": "createManyPost",
        "description": "Create several Post",
        "tags": [
          "post"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateManyArgs"
              }
            }
          }
        }
      }
    },
    "/post/findUnique": {
      "get": {
        "operationId": "findUniquePost",
        "description": "Find one unique Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFindUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/findFirst": {
      "get": {
        "operationId": "findFirstPost",
        "description": "Find the first Post matching the given condition",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFindFirstArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/findMany": {
      "get": {
        "operationId": "findManyPost",
        "description": "Find a list of Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFindManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/update": {
      "patch": {
        "operationId": "updatePost",
        "description": "Update a Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdateArgs"
              }
            }
          }
        }
      }
    },
    "/post/updateMany": {
      "patch": {
        "operationId": "updateManyPost",
        "description": "Update Posts matching the given condition",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdateManyArgs"
              }
            }
          }
        }
      }
    },
    "/post/upsert": {
      "post": {
        "operationId": "upsertPost",
        "description": "Upsert a Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpsertArgs"
              }
            }
          }
        }
      }
    },
    "/post/delete": {
      "delete": {
        "operationId": "deletePost",
        "description": "Delete one unique Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Post",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDeleteUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/deleteMany": {
      "delete": {
        "operationId": "deleteManyPost",
        "description": "Delete Posts matching the given condition",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDeleteManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/count": {
      "get": {
        "operationId": "countPost",
        "description": "Find a list of Post",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "$ref": "#/components/schemas/PostCountAggregateOutputType"
                        }
                      ],
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCountArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/aggregate": {
      "get": {
        "operationId": "aggregatePost",
        "description": "Aggregate Posts",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AggregatePost",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAggregateArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/post/groupBy": {
      "get": {
        "operationId": "groupByPost",
        "description": "Group Posts by fields",
        "tags": [
          "post"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PostGroupByOutputType"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostGroupByArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/create": {
      "post": {
        "operationId": "createAuth",
        "description": "Create a new Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCreateArgs"
              }
            }
          }
        }
      }
    },
    "/auth/createMany": {
      "post": {
        "operationId": "createManyAuth",
        "description": "Create several Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCreateManyArgs"
              }
            }
          }
        }
      }
    },
    "/auth/findUnique": {
      "get": {
        "operationId": "findUniqueAuth",
        "description": "Find one unique Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthFindUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/findFirst": {
      "get": {
        "operationId": "findFirstAuth",
        "description": "Find the first Auth matching the given condition",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthFindFirstArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/findMany": {
      "get": {
        "operationId": "findManyAuth",
        "description": "Find a list of Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Auth"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthFindManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/update": {
      "patch": {
        "operationId": "updateAuth",
        "description": "Update a Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpdateArgs"
              }
            }
          }
        }
      }
    },
    "/auth/updateMany": {
      "patch": {
        "operationId": "updateManyAuth",
        "description": "Update Auths matching the given condition",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpdateManyArgs"
              }
            }
          }
        }
      }
    },
    "/auth/upsert": {
      "post": {
        "operationId": "upsertAuth",
        "description": "Upsert a Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpsertArgs"
              }
            }
          }
        }
      }
    },
    "/auth/delete": {
      "delete": {
        "operationId": "deleteAuth",
        "description": "Delete one unique Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Auth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDeleteUniqueArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/deleteMany": {
      "delete": {
        "operationId": "deleteManyAuth",
        "description": "Delete Auths matching the given condition",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BatchPayload",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDeleteManyArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/count": {
      "get": {
        "operationId": "countAuth",
        "description": "Find a list of Auth",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "$ref": "#/components/schemas/AuthCountAggregateOutputType"
                        }
                      ],
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCountArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/aggregate": {
      "get": {
        "operationId": "aggregateAuth",
        "description": "Aggregate Auths",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AggregateAuth",
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthAggregateArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    },
    "/auth/groupBy": {
      "get": {
        "operationId": "groupByAuth",
        "description": "Group Auths by fields",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuthGroupByOutputType"
                      },
                      "description": "The Prisma response data serialized with superjson"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/_Meta",
                      "description": "The superjson serialization metadata for the \"data\" field"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_Error"
                }
              }
            },
            "description": "Request is unprocessable due to validation errors"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Superjson-serialized Prisma query object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthGroupByArgs"
                }
              }
            }
          },
          {
            "name": "meta",
            "in": "query",
            "description": "Superjson serialization metadata for parameter \"q\"",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        ]
      }
    }
  }
}